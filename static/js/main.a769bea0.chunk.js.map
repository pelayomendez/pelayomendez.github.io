{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","HeaderContainer","ComposerContainer","ComposerHeaderContainer","TextContainer","HaikuCount","textarea","HaikuText","ImageContainer","FooterContainer","App","useState","haikuText","setHaikuText","syllabeCount","setSyllabeCount","imageSource","setImageSource","setImageWidth","setImageHeight","countSyllabes","initialword","word","toLowerCase","length","result","replace","match","hiatos","queryString","escape","searchUrl","getImages","a","fetch","response","ok","json","data","console","log","imageArray","hits","selectedImage","Math","floor","random","imagePreviewURL","webformatURL","imageWidth","webformatWidth","imageHeight","webformatHeight","useEffect","onClick","publishtext","url","window","open","style","backgroundImage","value","readOnly","onChange","e","auxhaikuText","target","lines","split","syllabeResult","line","ns","String","placeholder","href","src","width","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a769bea0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport styled from 'styled-components'\n\nimport { FaLightbulb } from 'react-icons/fa';\nimport { FaTwitter } from 'react-icons/fa';\n\nconst App: React.FC = () => {\n  \n  const [haikuText, setHaikuText] = useState('')\n  const [syllabeCount, setSyllabeCount] = useState('')\n\n  const [imageSource, setImageSource] = useState('')\n  const [imageWidth, setImageWidth] = useState(0)\n  const [imageHeight, setImageHeight] = useState(0)\n\n  const countSyllabes: Function = (initialword: string) => {\n    \n    let word: string = initialword.toLowerCase()\n    \n    if(word.length < 1) return 0;\n    if(word.length <= 2) return 1;\n    word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, \"\")\n    word = word.replace(/^y/, \"\")\n    const result = word.match(/[aeiouy]{1,2}/g)\n\n    const hiatos: RegExpMatchArray = initialword.match(/a[eoíú]|e[aoíú]|o[aeíú]|í[aeo]|ú[aeo]/g) || []\n    \n    if(result) {\n      return result.length + hiatos.length\n    } else {  \n      return 0\n    }\n  }\n\n  const parseText = (e: React.ChangeEvent) => {\n    const value: string = (e.target as HTMLTextAreaElement).value\n    const auxhaikuText: string = value\n    \n    const lines: Array<string> = auxhaikuText.split(/\\n/)\n    let syllabeResult: string = ''\n    for(const line of lines) {\n      const ns: number = countSyllabes(line)\n      syllabeResult += ((ns !== 0) ? String(ns) : '') + '\\n'\n    }\n\n    setHaikuText(auxhaikuText)\n    setSyllabeCount(syllabeResult)\n  }\n\n  const sendTweet = () => {\n    const publishtext: string = escape(haikuText + '\\n\\n') \n    const url: string = `https://twitter.com/intent/tweet?hashtags=Haiku&text=${publishtext}`\n    window.open(url)\n  }\n\n  const apiKey: string = '17994973-630511a782eee19f899d5fd17'\n  const queryString: string = escape(haikuText)\n  const searchUrl: string = `https://pixabay.com/api/?key=${apiKey}&q=${queryString}&image_type=photo`\n\n  const getImages = async () => {\n    let response: Response = await fetch(searchUrl) \n    let responseOK = response && response.ok;\n    if (responseOK) {\n      let data = await response.json();\n      // do something with data\n      console.log(data)\n      const imageArray: Array<any> = data.hits\n      \n      if(imageArray.length > 0) {\n        const selectedImage: any = imageArray[Math.floor(Math.random() * imageArray.length)]\n        const imagePreviewURL: string = selectedImage.webformatURL\n        const imageWidth: number = selectedImage.webformatWidth\n        const imageHeight: number = selectedImage.webformatHeight\n\n        setImageSource(imagePreviewURL)\n        setImageWidth(imageWidth)\n        setImageHeight(imageHeight)\n      }\n    }\n  }\n\n  useEffect(()=>{\n    getImages()\n  },[])\n\n  return (\n    <AppContainer>\n      <HeaderContainer>\n      <h1>\n          <b>TwaikUmatic 1.0</b> :: Pelayo Méndez 2020\n        </h1> \n        <h2>\n          Distraction Free #haiku #senryu Twitter writting machine.<br/>\n        </h2>  \n      </HeaderContainer>\n      <ComposerContainer>\n        <ComposerHeaderContainer>\n          <button onClick={getImages}>\n            <FaLightbulb /> \n          </button>\n          <button onClick={sendTweet}>\n            <FaTwitter />\n          </button>\n        </ComposerHeaderContainer>\n        <ImageContainer style={{backgroundImage: `url(${imageSource})`}} />\n        <TextContainer>\n          <HaikuCount value={syllabeCount} readOnly></HaikuCount>\n          <HaikuText value={haikuText} onChange={parseText} placeholder=\"Haiku: Poema japonés de 17 sílabas nacido de la escisión del haikai, del cual se conservaron solo los tres versículos iniciales (de 5, 7 y 5 sílabas respectivamente).\"></HaikuText>\n        </TextContainer>\n      </ComposerContainer>\n      <FooterContainer>\n        \n        <h3>\n          Images powered by:\n        </h3>\n          <a href=\"https://pixabay.com/\" target=\"_blank\">\n            <img src=\"https://pixabay.com/static/img/logo.png\" width=\"100px\" />\n        </a>\n      </FooterContainer>\n    </AppContainer>\n  );\n}\n\n\nconst AppContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 90px;\n`\n\nconst HeaderContainer = styled.div`\n  color: #bfbfbf;\n  position: fixed;\n  left: 30px;\n  bottom: 30px;\n  h1 {\n    font-size: 12px;\n  }\n  h2 {\n    font-size: 11px;\n  }\n`\n\nconst ComposerContainer = styled.div`\n\n`\n\nconst ComposerHeaderContainer = styled.div`\n  display: flex;\n  align-items: right;\n  justify-content: flex-end;\n  button {\n    color: grey;\n    font-size: 18px;\n    margin-left: 15px;\n    cursor: pointer;\n    border: 0;\n    background: none;\n    box-shadow: none;\n    border-radius: 0px;\n  }\n  button:hover {\n    color: black;\n  }\n`\n\nconst TextContainer = styled.div`\n  width: 100%;\n  display: flex;\n  margin-top: 15px;\n  textarea {\n    resize: none;\n    border: none;\n    height: 150px;\n  }\n`\n\nconst HaikuCount = styled.textarea`\n  width: 40px;\n  float: left;\n  text-align: justify;\n  -moz-text-align-last: center; /* Firefox 12+ */\n  text-align-last: center;\n`\n\nconst HaikuText = styled.textarea`\n  width: 100%;\n`\n\nconst ImageContainer = styled.div`\n  width: 480px;\n  height: 420px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: 50% 50%;\n`\n\nconst FooterContainer = styled.div`\n  color: #bfbfbf;\n  position: fixed;\n  right: 30px;\n  bottom: 30px;\n  text-align: center;\n\n  h3 {\n    font-size: 11px;\n  }\n  img {\n    filter: invert(100%);\n  }\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}